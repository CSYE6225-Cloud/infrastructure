AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225
Parameters:
  Domain:
    Description: "tld domain"
    Type: String
    Default: ""
  VpcCidrBlock:
    Description: "Cidr block for vpc"
    Type: String
    Default: "10.0.0.0/16"
  Subnet1CidrBlock:
    Description: "Cidr block for subnet1"
    Type: String
    Default: "10.0.1.0/24"
  Subnet2CidrBlock:
    Description: "Cidr block for subnet2"
    Type: String
    Default: "10.0.2.0/24"
  Subnet3CidrBlock:
    Description: "Cidr block for subnet3"
    Type: String
    Default: "10.0.3.0/24"
  PrivateSubnet1CidrBlock:
    Description: "Cidr block for private subnet1"
    Type: String
    Default: "10.0.11.0/24"
  PrivateSubnet2CidrBlock:
    Description: "Cidr block for private subnet2"
    Type: String
    Default: "10.0.12.0/24"
  PrivateSubnet3CidrBlock:
    Description: "Cidr block for private subnet3"
    Type: String
    Default: "10.0.13.0/24"
  Subnet1AZ:
    Description: "Available zone for subnet1"
    Type: String
    Default: "us-east-1a"
  Subnet2AZ:
    Description: "Available zone for subnet2"
    Type: String
    Default: "us-east-1b"
  Subnet3AZ:
    Description: "Available zone for subnet3"
    Type: String
    Default: "us-east-1c"
  DstCidrBlock:
    Description: "Destination CIDR Block"
    Type: String
    Default: "0.0.0.0/0"
  AmiId:
    Description: "AMI ID"
    Type: String
    Default: "ami-0ef4934d1bdf69a9f"
  KeyPair:
    Description: "Key pair name"
    Type: String
    Default: "aws"
  EnvironmentType:
    Description: "Environment type"
    Type: String
    Default: "dev"
  DbName:
    Description: "Database name"
    Type: String
    Default: "CSYE6225"
  DbUsername:
    Description: "Database username"
    Type: String
    Default: "csye6225"
  DbPassword:
    Description: "Database password"
    Type: String
  DbClass:
    Description: "Database class"
    Type: String
    Default: "db.t2.micro"
  DbStorage:
    Description: "Database storage"
    Type: String
    Default: "20"
  DbEngine:
    Description: "Database engine"
    Type: String
    Default: MySQL
  DbEngineVersion:
    Description: "Database engine version"
    Type: String
    Default: "8.0.27"
  DbBackupPeriod:
    Description: "Database backup period"
    Type: String
    Default: 0
  awsRegion:
    Description: "aws region"
    Type: String
    Default: "us-east-1"
  hostZoneId:
    Description: "Host zone ID"
    Type: String
    Default: "Z09168102C0BQK5DP9LKH" # 
  
Conditions:
      UseProdCondition:
        !Equals [!Ref EnvironmentType, dev]

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Public Subnet
  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref Subnet1CidrBlock
      AvailabilityZone: !Ref Subnet1AZ
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref Subnet2CidrBlock
      AvailabilityZone: !Ref Subnet2AZ
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  mySubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref Subnet3CidrBlock
      AvailabilityZone: !Ref Subnet3AZ
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Gateway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway

  # Public Route table
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  mySubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet1
      RouteTableId: !Ref myRouteTable
  mySubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet2
      RouteTableId: !Ref myRouteTable
  mySubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet3
      RouteTableId: !Ref myRouteTable
  myRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - AttachGateway
    Properties:
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: !Ref DstCidrBlock
      GatewayId: !Ref myInternetGateway
  
  # EC2 Instance Security Group
  myInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web app 22 80 443 8080
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref myLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref myLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Private Subnet
  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: !Ref Subnet1AZ
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: !Ref Subnet2AZ
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  myPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref PrivateSubnet3CidrBlock
      AvailabilityZone: !Ref Subnet3AZ
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  # Private Route Table
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  myPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet1
      RouteTableId: !Ref myPrivateRouteTable
  myPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet2
      RouteTableId: !Ref myPrivateRouteTable
  myPrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnet3
      RouteTableId: !Ref myPrivateRouteTable

  # RDS Instance Security Group
  myRdsInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySQL 3306
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref myInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  myRdsDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: MySQL for CSYE6225
      Family: mysql8.0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  myDbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: csye6225 subnet group
      SubnetIds: 
        - !Ref myPrivateSubnet1
        - !Ref myPrivateSubnet2
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackId
  
  myDb:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: !Ref DbName
      DBName: !Ref DbName
      DBInstanceClass: !Ref DbClass
      AllocatedStorage: !Ref DbStorage
      Engine: !Ref DbEngine
      EngineVersion: !Ref DbEngineVersion
      MasterUsername: !Ref DbUsername
      MasterUserPassword: !Ref DbPassword
      MultiAZ: False
      PubliclyAccessible: False
      DBSubnetGroupName: !Ref myDbSubnetGroup
      VPCSecurityGroups: 
        - !Ref myRdsInstanceSecurityGroup
      BackupRetentionPeriod: !Ref DbBackupPeriod
      DBParameterGroupName: !Ref myRdsDBParameterGroup
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName

  s3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join 
        - '.'
        - - !Select [2, !Split ['/', !Ref AWS::StackId]]
          - !If [UseProdCondition, 'dev', 'prod']
          - !Ref Domain
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      LifecycleConfiguration:
        Rules:
          - Id: myTransitionRule
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  
  myWebAppS3Role: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName

  myWebAppS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:DeleteObject'
              - 's3:PutObject'
            Resource: 
              - !Sub 
                - '${BUCKET_NAME}'
                - BUCKET_NAME: !GetAtt s3Bucket.Arn
              - !Sub 
                - '${BUCKET_NAME}/*'
                - BUCKET_NAME: !GetAtt s3Bucket.Arn
      Roles: 
        - !Ref myWebAppS3Role

  myWebAppS3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref myWebAppS3Role

  # Auto scaling
  # Load Balancer Security Group
  myLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  asgLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: 'asg_launch_config'
      LaunchTemplateData:
        ImageId: !Ref AmiId
        KeyName: !Ref KeyPair
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            DeleteOnTermination: true
            Groups:
              - !Ref myInstanceSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: "gp2"
              DeleteOnTermination: true
              VolumeSize: 20
        InstanceType: t2.micro
        # DisableApiTermination: true
        IamInstanceProfile: 
          Arn: !GetAtt myWebAppS3InstanceProfile.Arn
        # SecurityGroupIds:
        #   - !Ref myInstanceSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              yum update -y

              # config properties
              cat << EOF > /usr/local/etc/application.properties
              spring.jpa.hibernate.ddl-auto=none
              spring.datasource.url=jdbc:mysql://${myDb.Endpoint.Address}:3306/CSYE6225
              spring.datasource.username=${DbUsername}
              spring.datasource.password=${DbPassword}
              spring.datasource.driver-class-name=com.mysql.jdbc.Driver
              spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
              logging.level.org.springframework=DEBUG
              logging.pattern.file= %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%
              server.port=8080
              aws.region=${awsRegion}
              aws.bucket-name=${s3Bucket}
              spring.sql.init.mode=always
              spring.sql.init.schema-locations=file:///usr/local/etc/schema.sql
              EOF
              chown webapp:webapp /usr/local/etc/application.properties
              chmod 644 /usr/local/etc/application.properties

              systemctl daemon-reload
              systemctl enable webapp
              systemctl start webapp

  asgWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - AttachGateway
    Properties:
      AutoScalingGroupName: !Sub '${AWS::StackName}-asg'
      LaunchTemplate:
        LaunchTemplateId: !Ref asgLaunchTemplate
        Version: !GetAtt asgLaunchTemplate.LatestVersionNumber
      MaxSize: '5' # 5
      MinSize: '3' # 3
      DesiredCapacity: '3' #3
      VPCZoneIdentifier:
        - !Ref mySubnet1
        - !Ref mySubnet2
        - !Ref mySubnet3
      AvailabilityZones:
        - !Ref Subnet1AZ
        - !Ref Subnet2AZ
        - !Ref Subnet3AZ
      # HealthCheckGracePeriod: 90
      # NewInstancesProtectedFromScaleIn: true # delete old instance first
      # TerminationPolicies: OldestInstance, OldestLaunchConfiguration, NewestInstance, ClosestToNextInstanceHour, Default, OldestLaunchTemplate, and AllocationStrategy
      # if there are no scaling in, it can still keep the instance new,
      # it must be greater than 86400
      # MaxInstanceLifetime: 86400
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
  
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '2'
      Statistic: Average
      Threshold: '5.0'
      Period: '60'
      AlarmActions:
        - !Ref asgCPUPolicyHigh
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  asgCPUPolicyHigh:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      PolicyType: StepScaling
      EstimatedInstanceWarmup: 300 # in seconds, use the value from the default cooldown period for the Auto Scaling group, if not provided
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
  
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '2'
      Statistic: Average
      Threshold: '3.0'
      Period: '60'
      AlarmActions:
        - !Ref asgCPUPolicyLow
      Namespace: AWS/EC2
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref asgWebApp
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  asgCPUPolicyLow:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref asgWebApp
      PolicyType: StepScaling
      EstimatedInstanceWarmup: 300 # in seconds, use the value from the default cooldown period for the Auto Scaling group, if not provided
      StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1

  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - AttachGateway
    Properties:
      Name: !Sub ${AWS::StackName}-load-balancer
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref myLoadBalancerSecurityGroup
      Subnets:
        - !Ref mySubnet1
        - !Ref mySubnet2
        - !Ref mySubnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer

  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg

  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP

  myLoadBalancerDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref hostZoneId
      Type: A
      Name: !Join
              - '.'
              - - !If [UseProdCondition, 'dev', 'prod']
                - !Ref Domain
      AliasTarget:
        HostedZoneId: !GetAtt loadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt loadBalancer.DNSName

Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref myVPC
  Subnet1Id:
    Description: The Subnet1 ID
    Value: !Ref mySubnet1
  Subnet2Id:
    Description: The Subnet2 ID
    Value: !Ref mySubnet2
  Subnet3Id:
    Description: The Subnet3 ID
    Value: !Ref mySubnet3
  GatewayId:
    Description: The Gateway ID
    Value: !Ref myInternetGateway
  RouteTableId:
    Description: The Route Table ID
    Value: !Ref myRouteTable
  InstanceSecurityGroupId:
    Description: Instance security group ID
    Value: !Ref myInstanceSecurityGroup
  PrivateSubnet1Id:
    Description: The Private Subnet1 ID
    Value: !Ref myPrivateSubnet1
  PrivateSubnet2Id:
    Description: The Private Subnet2 ID
    Value: !Ref myPrivateSubnet2
  PrivateSubnet3Id:
    Description: The Private Subnet3 ID
    Value: !Ref myPrivateSubnet3
  PrivateRouteTableId:
    Description: The Route Table ID
    Value: !Ref myPrivateRouteTable
  S3BucketId:
    Description: S3 bucket ID
    Value: !Ref s3Bucket
  RdsSecurityGroupId:
    Description: RDS security group ID
    Value: !Ref myRdsInstanceSecurityGroup
  RdsDbParameterGroupId:
    Description: RDS DB parameter group ID
    Value: !Ref myRdsDBParameterGroup
  myDbSubnetGroupId:
    Description: DB subnet group ID
    Value: !Ref myDbSubnetGroup
  myDbId:
    Description: DB ID
    Value: !Ref myDb
  myWebAppS3RoleId:
    Description: Web App S3 Role ID
    Value: !Ref myWebAppS3Role
